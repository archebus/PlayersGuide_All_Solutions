// Fountain of Objects (Large project challenge)
// - Fountain = rooms, grid, player, pit.


// DISPLAY HELPER CLASS FOR MAIN --------------------
public static class Display
{
	public static void GameScreen(Room room, Player player)
	{
		Console.WriteLine($"--------------------------------------------------");
		Console.WriteLine($"You are in the room at (Row: {player.Pos.X}, Col: {player.Pos.Y}");
		if (room.GetType() != typeof(Room))
		{ 
			Console.WriteLine($"{room.Description}");
		}
		Console.Write($"What do you want to do? ");
	}
}
// ---------------------------------------------------


// ROOM DEFS -----------------------------------------
public class Room 
{
	public string Description { get; set; } = string.Empty;

	public virtual void Enable()
	{
		Console.WriteLine("There is nothing to enable here.");
	}
}

public class Entrance : Room
{
	public Entrance() { Description = "You see light coming from the cavern entrance."; }
}

public class Pit : Room 
{
	public Pit() { Description = "A pit opens up, you fall to your Death!"; }
}

public class Fountain : Room 
{
	public bool Enabled { get; set; } = false;

	public Fountain() { Description = "You hear water dripping in this room. The fountain is here!"; }

	public override void Enable()
	{
		if (!Enabled)
		{
			Console.WriteLine("You have enabled the fountain.");
			Description = "You hear water is rushing from the fountain.";
			this.Enabled = true;
			return;
		}

		Console.WriteLine("The fountain is already Enabled!");

	}
}
// ---------------------------------------------------


// PLAYER DEFS ---------------------------------------
public record Position(int X, int Y);
public record Command(string Verb, string Noun);

public class Player
{
	public Position Pos { get; set; } = default!;
	public bool Alive { get; set; } = true;
	public bool PlayerVictory { get; set; } = false;
	public Room CurrentRoom { get; set; } = default!;

	public Player(Dungeon main)
	{
		Pos = new Position(0,0);
		CurrentRoom = main.Rooms[0,0];
	}

	public string GetInput()
	{
		Console.Write("> ");
		return Console.ReadLine()?.Trim().ToLower() ?? "";
	} 

	public Command? ParseInput(string input)
	{
		if (string.IsNullOrWhiteSpace(input)) return null;

		var parts = input.Split(new[] { ' ' }, 2, StringSplitOptions.RemoveEmptyEntries);
		if (parts.Length == 0) return null;

		var Verb = parts[0];
		var Noun = parts.Length > 1 ? parts[1] : "";

		return new Command(Verb, Noun);
	}

	public void Action(Command c, Dungeon dung)
	{
		switch(c.Verb)
		{
			case "move":
				Move(c.Noun, dung);
				break;
			case "enable":
				Enable();
				break;
			case "exit":
				Exit(dung);
				break;
			default:
				Console.WriteLine("Unknown command.");
				break;	
		}
	}

	public void Move(string dir, Dungeon dung)
	{
		Position desiredPos;

		switch(dir)
		{
			case "north":
				desiredPos = new Position(Pos.X,Pos.Y+1);
				break;
			case "south":
				desiredPos = new Position(Pos.X,Pos.Y-1);
				break;
			case "east":
				desiredPos = new Position(Pos.X+1,Pos.Y);
				break;
			case "west":
				desiredPos = new Position(Pos.X-1,Pos.Y);
				break;
			default:
				Console.WriteLine("Unrecognized direction");
				return;
		}
		
		if(dung.CheckValidPos(desiredPos))
		{
			Pos = desiredPos;
			CurrentRoom = dung.Rooms[Pos.X,Pos.Y];
			return;
		}

		Console.WriteLine("You cannot move that way");
	}

	public void Enable()
	{
		if(CurrentRoom is Fountain)
		{
			CurrentRoom.Enable();
			return;
		}

		Console.WriteLine("There is nothing to enable");
	}

	public bool CheckAlive()
	{
		if(CurrentRoom is Pit)
		{
			Console.WriteLine("You plummet to your death in the pit");
			Alive = false;
			return Alive;
		}

		return Alive;
	}

	public void Exit(Dungeon dung)
	{
		if(CurrentRoom is Entrance && dung.Rooms[0,2].Enabled)
		{
			Console.WriteLine("You've escaped the dungeon!");
			PlayerVictory = true;
			return;
		}

		return PlayerVictory;
	}

}
// ---------------------------------------------------


// DUNGEON DEFS --------------------------------------
public class Dungeon
{
	public Room[,] Rooms { get; set; }

	public Dungeon()
	{
		Rooms = new Room[4,4];		// Starting 4x4, expand this to be variable with diff.
		InitRooms();
	}

	public Room GetRoom(Position pos) => Rooms[pos.X,pos.Y];

	private void InitRooms()
	{
		Random rand = new Random();

		for (int i = 0; i < Rooms.GetLength(0); i++)
		{
			for (int j = 0; j < Rooms.GetLength(1); j++)
			{
				if (i == 0 && j == 0)
				{
					Rooms[i,j] = new Entrance();
					continue;
				}
				else if (i == 0 && j == 2)
				{
					Rooms[i,j] = new Fountain();
					continue;
				}
				int roomRoll = rand.Next(0,5);
				
				Rooms[i,j] = roomRoll == 1 ? new Pit() : new Room();
			}
		}
	}

	public bool CheckValidPos(Position pos)
	{	 
		return 
		pos.X >= 0 && pos.X < Rooms.GetLength(0) &&
		pos.Y >= 0 && pos.Y < Rooms.GetLength(1);
	}
}
// ---------------------------------------------------


class Program
{
	static void Main(string[] args)
	{
		bool gameRun = true;

		Dungeon main = new Dungeon();
		Player p1 = new Player(main);

		string input;
		
		while(gameRun)
		{
			Display.GameScreen(main.GetRoom(p1.Pos), p1);
			input = p1.GetInput();
			p1.Action(p1.ParseInput(input)!, main);
			gameRun = p1.CheckAlive();
		        gameRun = p1.
		}
	}
}
